name: create Ditto Things from field Config File

on:
  push:
    paths:
      - 'field-configs/*.json'

permissions:
  contents: write

jobs:
  recreate-ditto-thing:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Extract Repository Information
        run: |
          echo "ORG_NAME=$GITHUB_REPOSITORY_OWNER" >> $GITHUB_ENV
          echo "REPO_NAME=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV
          echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

      - name: Get changed field config files
        id: files
        run: |
          CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '^field-configs/.*\.json$' || true)
          echo "CHANGED=$CHANGED" >> $GITHUB_OUTPUT
          echo "CHANGED_FILES=$CHANGED" >> $GITHUB_ENV

      - name: Process each changed field config file
        if: steps.files.outputs.CHANGED != ''
        env:
          DITTO_AUTH: ${{ secrets.DITTO_AUTH }}
          DITTO_HOST: ${{ secrets.DITTO_HOST }}
          ORG_NAME: ${{ env.ORG_NAME }}
          REPO_NAME: ${{ env.REPO_NAME }}
          BRANCH_NAME: ${{ env.BRANCH_NAME }}
        run: |
          for FILE in $CHANGED_FILES; do
            echo "üì¶ Processing file: $FILE"

            POLICY_ID=$(jq -r '.policyId' "$FILE")
            ATTRIBUTES=$(jq -c 'del(.policyId, .field_devices)' "$FILE")
            FIELD_DEVICES=$(jq -r '.field_devices[]' "$FILE")

            API_URL="https://api.github.com/repos/$ORG_NAME/$REPO_NAME/contents/FoxESS_inverter/fieldthing.json?ref=refs/heads/$BRANCH_NAME"
            TD_URL=$(curl -s "$API_URL" | jq -r '.download_url')

            if [[ "$TD_URL" == "null" || -z "$TD_URL" ]]; then
              echo "‚ùå TD definition URL not found"
              exit 1
            fi

            for THING_ID in $FIELD_DEVICES; do
              echo "üÜî Creating Thing ID: $THING_ID"

              STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X GET "$DITTO_HOST/api/2/things/$THING_ID" \
                -H "Authorization: Bearer $DITTO_AUTH")

              if [[ "$STATUS" == "200" ]]; then
                curl -s -X DELETE "$DITTO_HOST/api/2/things/$THING_ID" \
                  -H "Authorization: Bearer $DITTO_AUTH"
              fi

              CREATE_PAYLOAD=$(jq -n --arg pid "$POLICY_ID" --arg def "$TD_URL" '{policyId: $pid, definition: $def}')

              CREATE_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X PUT "$DITTO_HOST/api/2/things/$THING_ID" \
                -H "Authorization: Bearer $DITTO_AUTH" \
                -H "Content-Type: application/json" \
                --data-raw "$CREATE_PAYLOAD")

              if [[ ! "$CREATE_STATUS" =~ ^2 ]]; then
                echo "‚ùå Failed to create Thing [$THING_ID]"
                exit 1
              fi

              PATCH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X PATCH "$DITTO_HOST/api/2/things/$THING_ID" \
                -H "Authorization: Bearer $DITTO_AUTH" \
                -H "Content-Type: application/merge-patch+json" \
                -d "{\"attributes\": $ATTRIBUTES}")

              if [[ ! "$PATCH_STATUS" =~ ^2 ]]; then
                echo "‚ùå Failed to patch attributes for $THING_ID"
                exit 1
              else
                echo "‚úÖ Thing [$THING_ID] created and patched"
              fi
            done
          done
