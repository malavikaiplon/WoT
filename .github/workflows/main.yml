name: Watch JSON Files in "WOT/" Directory
on:
  push:
    paths:
      - 'FoxESS_inverter/**/*.json'  # Runs when any JSON file inside "thing/" is added or modified
  workflow_dispatch:  # Allows manual execution from GitHub Actions UI

jobs:
  update-ditto:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2  # Fetch last 2 commits to compare changes

      - name: Identify Changed JSON Files
        id: changed_files
        run: |
          FILES=$(git diff --name-only HEAD~1 HEAD | grep '^FoxESS_inverter/.*\.json$' || echo "")
          echo "FILES=$FILES" >> $GITHUB_ENV
          echo "Changed JSON files: $FILES"

      - name: Check if Any JSON Files Were Changed
        if: env.FILES == ''
        run: echo "No JSON file changes detected. Skipping workflow."

      - name: Extract Repository Information
        run: |
          echo "ORG_NAME=$GITHUB_REPOSITORY_OWNER" >> $GITHUB_ENV
          echo "REPO_NAME=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV
          echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

      - name: Identify Changed JSON Files
        run: |
          FILE_PATHS=$(git diff --name-only HEAD~1 HEAD | grep 'FoxESS_inverter/.*\.json$' || echo "")
          echo "CHANGED_FILES=$FILE_PATHS" >> $GITHUB_ENV
          echo "Modified Files: $FILE_PATHS"
          
      - name: Fetch Private Raw File URL
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          if [ -n "$CHANGED_FILES" ]; then
            for FILE in $CHANGED_FILES; do
              API_URL="https://api.github.com/repos/$ORG_NAME/$REPO_NAME/contents/$FILE?ref=refs/heads/$BRANCH_NAME"
              RAW_URL=$(curl -s -H "Authorization: token $GH_PAT" "$API_URL" | jq -r '.download_url')
              echo "Private Raw URL for $FILE: $RAW_URL"
              echo "RAW_FILE_URL=$RAW_URL" >> $GITHUB_ENV
            done
          else
            echo "No modified JSON files found."
          fi
          
      - name: Update Ditto Thing with WoT Definition
        if: env.RAW_FILE_URL != ''
        env:
          DITTO_URL: "https://ritter-ditto.iplon.co.in/api/2/things"
          DITTO_AUTH: ${{ secrets.DITTO_AUTH }}
        run: |
          THING_ID="iplon.INV1567:MAS0012"
          POLICY_ID="device.test:policy"
          
          JSON_PAYLOAD=$(jq -n \
            --arg policyId "$POLICY_ID" \
            --arg definition "$RAW_FILE_URL" \
            '{policyId: $policyId, definition: $definition}')

          echo "Updating Ditto with Definition: $JSON_PAYLOAD"

          STATUS_CODE=$(curl -s -o response.json -w "%{http_code}" -X PUT "$DITTO_URL/$THING_ID" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $DITTO_AUTH" \
            --data-raw "$JSON_PAYLOAD")

          echo "Ditto Response:"
          cat response.json
          
          if [[ "$STATUS_CODE" -ne 200 && "$STATUS_CODE" -ne 204 ]]; then
            echo "❌ ERROR: Ditto API returned status code $STATUS_CODE"
            exit 1
          fi

          echo "✅ Successfully updated Ditto Thing: $THING_ID"

