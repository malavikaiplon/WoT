name: Update Ditto WoT Model

on:
  push:
    paths:
      - 'FoxESS_inverter/**/*.Model.json'    # Detects changes in main JSON files
      - 'FoxESS_inverter/**/*.Submodel.json'  # Detects changes in Submodel JSON files
  workflow_dispatch:  # Allows manual execution

permissions:
  contents: write  # Required for pushing changes

jobs:
  update-ditto:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Identify Changed JSON Files
        run: |
          FILES_CHANGED=$(git diff --name-only HEAD^ HEAD | grep -E '.*\.(Model|Submodel)\.json$' || echo "")
          echo "FILES_CHANGED=$FILES_CHANGED" >> $GITHUB_ENV
          echo "Modified Files: $FILES_CHANGED"

      - name: Extract Names from Changed Files
        run: |
          MODEL_FILES=()
          Submodel_FILES=()

          for FILE in $FILES_CHANGED; do
            BASE_NAME=$(basename "$FILE" | sed -E 's/\.(Model|Submodel)\.json$//')
            if [[ "$FILE" == *".Model.json" ]]; then
              MODEL_FILES+=("$BASE_NAME")
            elif [[ "$FILE" == *".Submodel.json" ]]; then
              Submodel_FILES+=("$BASE_NAME")
            fi
          done

          echo "MODEL_FILES=${MODEL_FILES[@]}" >> $GITHUB_ENV
          echo "Submodel_FILES=${Submodel_FILES[@]}" >> $GITHUB_ENV
          echo "Detected Model Files: ${MODEL_FILES[@]}"
          echo "Detected Submodel Files: ${Submodel_FILES[@]}"

      - name: Fetch Private GitHub Raw URLs
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          UPDATED_MODELS=()

          for MODEL_NAME in "${MODEL_FILES[@]}"; do
            MODEL_PATH=$(find . -type f -name "$MODEL_NAME.Model.json")
            Submodel_PATH=$(find . -type f -name "$MODEL_NAME.Submodel.json")

            # Get GitHub API URLs
            MODEL_URL="https://api.github.com/repos/${{ github.repository }}/contents/$MODEL_PATH?ref=${{ github.ref_name }}"
            Submodel_URL="https://api.github.com/repos/${{ github.repository }}/contents/$Submodel_PATH?ref=${{ github.ref_name }}"

            # Fetch GitHub raw URLs
            MODEL_RAW_URL=$(curl -s -H "Authorization: token $GH_PAT" "$MODEL_URL" | jq -r '.download_url')
            Submodel_RAW_URL=$(curl -s -H "Authorization: token $GH_PAT" "$Submodel_URL" | jq -r '.download_url')

            echo "Fetched Model URL: $MODEL_RAW_URL"
            echo "Fetched Submodel URL: $Submodel_RAW_URL"

            # Update JSON definition dynamically
            jq --arg SubmodelUrl "$Submodel_RAW_URL" '.definition = $SubmodelUrl' "$MODEL_PATH" > temp.json && mv temp.json "$MODEL_PATH"
            UPDATED_MODELS+=("$MODEL_PATH")
          done

          echo "UPDATED_MODELS=${UPDATED_MODELS[@]}" >> $GITHUB_ENV

      - name: Commit and Push Updated JSON
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git add .
          git commit -m "Updated model definitions with correct Submodel URLs" || echo "No changes to commit"
          git push origin ${{ github.ref_name }}

      - name: Upload to Ditto
        env:
          DITTO_URL: "https://ritter-ditto.iplon.co.in/api/2/things"
          DITTO_AUTH: ${{ secrets.DITTO_AUTH }}
        run: |
          for MODEL_PATH in "${UPDATED_MODELS[@]}"; do
            MODEL_NAME=$(basename "$MODEL_PATH" .Model.json)
            THING_ID="dev:$MODEL_NAME"

            JSON_PAYLOAD=$(jq -n \
              --arg policyId "device.test:policy" \
              --arg definition "$(cat "$MODEL_PATH" | jq -r '.definition')" \
              '{policyId: $policyId, definition: $definition}')

            echo "Uploading Thing to Ditto: $THING_ID"
            STATUS_CODE=$(curl -s -o response.json -w "%{http_code}" -X PUT "$DITTO_URL/$THING_ID" \
              -H "Content-Type: application/json" \
              -H "Authorization: Basic $DITTO_AUTH" \
              --data-raw "$JSON_PAYLOAD")

            echo "Ditto Response:"
            cat response.json
            
            if [[ "$STATUS_CODE" -ne 200 && "$STATUS_CODE" -ne 204 ]]; then
              echo "‚ùå ERROR: Ditto API returned status code $STATUS_CODE"
              exit 1
            fi
          done
