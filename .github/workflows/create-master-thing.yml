name: Sync Ditto Thing from Config File

on:
  push:
    paths:
      - 'configs/*.json'

jobs:
  recreate-ditto-thing:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Show Commit Range
        run: echo "Diffing commits:${{ github.event.before }} ‚Üí ${{ github.sha }}"

      - name: Extract Repository Information
        run: |
          echo "ORG_NAME=$GITHUB_REPOSITORY_OWNER" >> $GITHUB_ENV
          echo "REPO_NAME=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV
          echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

      - name: Get changed config files
        id: files
        run: |
          CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '^configs/.*\.json$' || true)
          echo "CHANGED=$CHANGED" >> $GITHUB_OUTPUT
          echo "Detected changed files: $CHANGED"
          echo "CHANGED_FILES=$CHANGED" >> $GITHUB_ENV

      - name: Fetch Private Raw File URL
        if: env.CHANGED_FILES != ''
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          for FILE in $CHANGED_FILES; do
            echo "üîç Fetching Raw URL for $FILE"
            API_URL="https://api.github.com/repos/$ORG_NAME/$REPO_NAME/contents/$FILE?ref=refs/heads/$BRANCH_NAME"
            RAW_URL=$(curl -s -H "Authorization: token $GH_PAT" "$API_URL" | jq -r '.download_url')

            if [ "$RAW_URL" = "null" ]; then
              echo "‚ùå Could not get raw URL for $FILE"
              exit 1
            fi

            echo "‚úÖ Raw URL: $RAW_URL"
            echo "RAW_URL_$FILE=$RAW_URL" >> $GITHUB_ENV
          done

      - name: Process each changed config file
        if: steps.files.outputs.CHANGED != ''
        env:
          DITTO_AUTH: ${{ secrets.DITTO_AUTH }}
          DITTO_HOST: ${{ secrets.DITTO_HOST }}
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          for FILE in $CHANGED_FILES; do
            echo "üì¶ Processing file: $FILE"

            # Extract thing ID from file name
            THING_ID=$(basename "$FILE" .json)
            echo "üÜî Thing ID = $THING_ID"

            # Extract policy ID and attributes
            POLICY_ID=$(jq -r '.policyId' "$FILE")
            ATTRIBUTES=$(jq -c 'del(.policyId)' "$FILE")

            echo "Policy ID: $POLICY_ID"
            echo "Attributes: $ATTRIBUTES"

            # Build WoT TD definition URL (secure with GH_PAT if needed)
            API_URL="https://api.github.com/repos/$ORG_NAME/$REPO_NAME/contents/$FILE?ref=refs/heads/$BRANCH_NAME"
            TD_URL=$(curl -s -H "Authorization: token $GH_PAT" "$API_URL" | jq -r '.download_url')

            if [[ "$TD_URL" == "null" || -z "$TD_URL" ]]; then
              echo "‚ùå TD definition URL not found for $FILE"
              exit 1
            fi

            echo "üåê TD definition URL: $TD_URL"

            # Check if Thing exists
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X GET "$DITTO_HOST/api/2/things/$THING_ID" \
              -H "Authorization: Bearer $DITTO_AUTH")

            if [[ "$STATUS" == "200" ]]; then
              echo "üîÅ Thing [$THING_ID] exists, deleting..."
              DELETE_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE "$DITTO_HOST/api/2/things/$THING_ID" \
                -H "Authorization: Bearer $DITTO_AUTH")
              echo "üóëÔ∏è Delete status: $DELETE_STATUS"
            fi

            # Build creation payload
            CREATE_PAYLOAD=$(jq -n \
              --arg pid "$POLICY_ID" \
              --arg def "$TD_URL" \
              '{policyId: $pid, definition: $def}')

            echo "üõ†Ô∏è Creating Thing with payload: $CREATE_PAYLOAD"

            # Create Thing
            CREATE_RESPONSE=$(curl -s -w "\n%{http_code}" -X PUT "$DITTO_HOST/api/2/things/$THING_ID" \
              -H "Authorization: Bearer $DITTO_AUTH" \
              -H "Content-Type: application/json" \
              --data-raw "$CREATE_PAYLOAD")

            CREATE_BODY=$(echo "$CREATE_RESPONSE" | sed '$d')
            CREATE_STATUS=$(echo "$CREATE_RESPONSE" | tail -n1)

            if [[ ! "$CREATE_STATUS" =~ ^2 ]]; then
              echo "‚ùå Failed to create Thing [$THING_ID]"
              echo "Status Code: $CREATE_STATUS"
              echo "Response Body: $CREATE_BODY"
              exit 1
            fi

            echo "‚úÖ Thing [$THING_ID] created with WoT definition"

            # Patch attributes
            PATCH_RESPONSE=$(curl -s -w "\n%{http_code}" -X PATCH "$DITTO_HOST/api/2/things/$THING_ID" \
              -H "Authorization: Bearer $DITTO_AUTH" \
              -H "Content-Type: application/json" \
              -d "{\"attributes\": $ATTRIBUTES}")

            PATCH_BODY=$(echo "$PATCH_RESPONSE" | sed '$d')
            PATCH_STATUS=$(echo "$PATCH_RESPONSE" | tail -n1)

            if [[ "$PATCH_STATUS" =~ ^2 ]]; then
              echo "‚úÖ Attributes patched successfully"
            else
              echo "‚ùå Failed to patch attributes"
              echo "Status Code: $PATCH_STATUS"
              echo "Response Body: $PATCH_BODY"
              exit 1
            fi
          done
